# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Result(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, metric: str=None, value: float=None, epoch: int=None):  # noqa: E501
        """Result - a model defined in Swagger

        :param metric: The metric of this Result.  # noqa: E501
        :type metric: str
        :param value: The value of this Result.  # noqa: E501
        :type value: float
        :param epoch: The epoch of this Result.  # noqa: E501
        :type epoch: int
        """
        self.swagger_types = {
            'metric': str,
            'value': float,
            'epoch': int
        }

        self.attribute_map = {
            'metric': 'metric',
            'value': 'value',
            'epoch': 'epoch'
        }

        self._metric = metric
        self._value = value
        self._epoch = epoch

    @classmethod
    def from_dict(cls, dikt) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Result of this Result.  # noqa: E501
        :rtype: Result
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric(self) -> str:
        """Gets the metric of this Result.


        :return: The metric of this Result.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric: str):
        """Sets the metric of this Result.


        :param metric: The metric of this Result.
        :type metric: str
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501

        self._metric = metric

    @property
    def value(self) -> float:
        """Gets the value of this Result.


        :return: The value of this Result.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this Result.


        :param value: The value of this Result.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def epoch(self) -> int:
        """Gets the epoch of this Result.


        :return: The epoch of this Result.
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch: int):
        """Sets the epoch of this Result.


        :param epoch: The epoch of this Result.
        :type epoch: int
        """
        if epoch is None:
            raise ValueError("Invalid value for `epoch`, must not be `None`")  # noqa: E501

        self._epoch = epoch
