# coding: utf-8

"""
    xpctl

    This is a sample xpctl  server.  You can find out more about xpctl at [baseline](https://github.com/dpressel/baseline/blob/master/docs/xpctl.md).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class XpctlApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def experiment_details(self, task, eid, **kwargs):  # noqa: E501
        """Find experiment by id  # noqa: E501

        Returns a single experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_details(task, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task: task name (required)
        :param str eid: ID of experiment to return (required)
        :return: Experiment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_details_with_http_info(task, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_details_with_http_info(task, eid, **kwargs)  # noqa: E501
            return data

    def experiment_details_with_http_info(self, task, eid, **kwargs):  # noqa: E501
        """Find experiment by id  # noqa: E501

        Returns a single experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_details_with_http_info(task, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task: task name (required)
        :param str eid: ID of experiment to return (required)
        :return: Experiment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task', 'eid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task' is set
        if ('task' not in params or
                params['task'] is None):
            raise ValueError("Missing the required parameter `task` when calling `experiment_details`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `experiment_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task' in params:
            path_params['task'] = params['task']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{task}/{eid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Experiment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_by_label(self, label, **kwargs):  # noqa: E501
        """Finds experiment by label  # noqa: E501

        Multiple label values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_by_label(label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] label: label values that need to be considered for filter (required)
        :return: list[Experiment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_by_label_with_http_info(label, **kwargs)  # noqa: E501
        else:
            (data) = self.find_by_label_with_http_info(label, **kwargs)  # noqa: E501
            return data

    def find_by_label_with_http_info(self, label, **kwargs):  # noqa: E501
        """Finds experiment by label  # noqa: E501

        Multiple label values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_by_label_with_http_info(label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] label: label values that need to be considered for filter (required)
        :return: list[Experiment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_by_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'label' is set
        if ('label' not in params or
                params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `find_by_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'label' in params:
            query_params.append(('label', params['label']))  # noqa: E501
            collection_formats['label'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/findbylabel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Experiment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_results(self, task, prop, value, **kwargs):  # noqa: E501
        """Find results by dataset and task  # noqa: E501

        Returns a single experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_results(task, prop, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task: task name (required)
        :param str prop: property of an experiment dataset, username, label etc (required)
        :param str value: value of the property. eg: prop=username&value=dpressel (required)
        :param str reduction_dim: which dimension to reduce on, default=sha1
        :param str metric: metric
        :param str sort: metric to sort results on
        :param int nconfig: number of experiments to aggregate
        :param str event_type: train/dev/test
        :return: list[ExperimentAggregate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_results_with_http_info(task, prop, value, **kwargs)  # noqa: E501
        else:
            (data) = self.get_results_with_http_info(task, prop, value, **kwargs)  # noqa: E501
            return data

    def get_results_with_http_info(self, task, prop, value, **kwargs):  # noqa: E501
        """Find results by dataset and task  # noqa: E501

        Returns a single experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_results_with_http_info(task, prop, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task: task name (required)
        :param str prop: property of an experiment dataset, username, label etc (required)
        :param str value: value of the property. eg: prop=username&value=dpressel (required)
        :param str reduction_dim: which dimension to reduce on, default=sha1
        :param str metric: metric
        :param str sort: metric to sort results on
        :param int nconfig: number of experiments to aggregate
        :param str event_type: train/dev/test
        :return: list[ExperimentAggregate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task', 'prop', 'value', 'reduction_dim', 'metric', 'sort', 'nconfig', 'event_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task' is set
        if ('task' not in params or
                params['task'] is None):
            raise ValueError("Missing the required parameter `task` when calling `get_results`")  # noqa: E501
        # verify the required parameter 'prop' is set
        if ('prop' not in params or
                params['prop'] is None):
            raise ValueError("Missing the required parameter `prop` when calling `get_results`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `get_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task' in params:
            path_params['task'] = params['task']  # noqa: E501

        query_params = []
        if 'prop' in params:
            query_params.append(('prop', params['prop']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'reduction_dim' in params:
            query_params.append(('reduction_dim', params['reduction_dim']))  # noqa: E501
        if 'metric' in params:
            query_params.append(('metric', params['metric']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'nconfig' in params:
            query_params.append(('nconfig', params['nconfig']))  # noqa: E501
        if 'event_type' in params:
            query_params.append(('event_type', params['event_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/results/{task}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExperimentAggregate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_result(self, experiment, **kwargs):  # noqa: E501
        """Add a new experiment in database  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_result(experiment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Experiment experiment: new mead experiment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_result_with_http_info(experiment, **kwargs)  # noqa: E501
        else:
            (data) = self.put_result_with_http_info(experiment, **kwargs)  # noqa: E501
            return data

    def put_result_with_http_info(self, experiment, **kwargs):  # noqa: E501
        """Add a new experiment in database  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_result_with_http_info(experiment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Experiment experiment: new mead experiment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment' is set
        if ('experiment' not in params or
                params['experiment'] is None):
            raise ValueError("Missing the required parameter `experiment` when calling `put_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'experiment' in params:
            body_params = params['experiment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/putresult', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_experiment(self, task, eid, **kwargs):  # noqa: E501
        """Deletes an experiment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_experiment(task, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task: task name (required)
        :param str eid: experiment id to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_experiment_with_http_info(task, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_experiment_with_http_info(task, eid, **kwargs)  # noqa: E501
            return data

    def remove_experiment_with_http_info(self, task, eid, **kwargs):  # noqa: E501
        """Deletes an experiment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_experiment_with_http_info(task, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task: task name (required)
        :param str eid: experiment id to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task', 'eid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task' is set
        if ('task' not in params or
                params['task'] is None):
            raise ValueError("Missing the required parameter `task` when calling `remove_experiment`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `remove_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task' in params:
            path_params['task'] = params['task']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{task}/{eid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_label(self, task, eid, **kwargs):  # noqa: E501
        """Updates an experiment in the database with form data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_label(task, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task: task name (required)
        :param str eid: ID of experiment that needs to be updated (required)
        :param str label: Updated label of the experiment
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_label_with_http_info(task, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_label_with_http_info(task, eid, **kwargs)  # noqa: E501
            return data

    def update_label_with_http_info(self, task, eid, **kwargs):  # noqa: E501
        """Updates an experiment in the database with form data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_label_with_http_info(task, eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task: task name (required)
        :param str eid: ID of experiment that needs to be updated (required)
        :param str label: Updated label of the experiment
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task', 'eid', 'label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task' is set
        if ('task' not in params or
                params['task'] is None):
            raise ValueError("Missing the required parameter `task` when calling `update_label`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `update_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task' in params:
            path_params['task'] = params['task']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{task}/{eid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
