# coding: utf-8

"""
    xpctl

    This is a sample xpctl  server.  You can find out more about xpctl at [baseline](https://github.com/dpressel/baseline/blob/master/docs/xpctl.md).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.aggregate_result import AggregateResult  # noqa: F401,E501


class ExperimentAggregate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task': 'str',
        'eid': 'str',
        'sha1': 'str',
        'config': 'str',
        'dataset': 'str',
        'username': 'str',
        'hostname': 'str',
        'exp_date': 'date',
        'label': 'str',
        'version': 'str',
        'train_results': 'list[AggregateResult]',
        'dev_results': 'list[AggregateResult]',
        'test_results': 'list[AggregateResult]'
    }

    attribute_map = {
        'task': 'task',
        'eid': 'eid',
        'sha1': 'sha1',
        'config': 'config',
        'dataset': 'dataset',
        'username': 'username',
        'hostname': 'hostname',
        'exp_date': 'exp_date',
        'label': 'label',
        'version': 'version',
        'train_results': 'train_results',
        'dev_results': 'dev_results',
        'test_results': 'test_results'
    }

    def __init__(self, task=None, eid=None, sha1=None, config=None, dataset=None, username=None, hostname=None, exp_date=None, label=None, version=None, train_results=None, dev_results=None, test_results=None):  # noqa: E501
        """ExperimentAggregate - a model defined in Swagger"""  # noqa: E501

        self._task = None
        self._eid = None
        self._sha1 = None
        self._config = None
        self._dataset = None
        self._username = None
        self._hostname = None
        self._exp_date = None
        self._label = None
        self._version = None
        self._train_results = None
        self._dev_results = None
        self._test_results = None
        self.discriminator = None

        if task is not None:
            self.task = task
        if eid is not None:
            self.eid = eid
        if sha1 is not None:
            self.sha1 = sha1
        if config is not None:
            self.config = config
        if dataset is not None:
            self.dataset = dataset
        if username is not None:
            self.username = username
        if hostname is not None:
            self.hostname = hostname
        if exp_date is not None:
            self.exp_date = exp_date
        if label is not None:
            self.label = label
        if version is not None:
            self.version = version
        if train_results is not None:
            self.train_results = train_results
        if dev_results is not None:
            self.dev_results = dev_results
        if test_results is not None:
            self.test_results = test_results

    @property
    def task(self):
        """Gets the task of this ExperimentAggregate.  # noqa: E501


        :return: The task of this ExperimentAggregate.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this ExperimentAggregate.


        :param task: The task of this ExperimentAggregate.  # noqa: E501
        :type: str
        """

        self._task = task

    @property
    def eid(self):
        """Gets the eid of this ExperimentAggregate.  # noqa: E501


        :return: The eid of this ExperimentAggregate.  # noqa: E501
        :rtype: str
        """
        return self._eid

    @eid.setter
    def eid(self, eid):
        """Sets the eid of this ExperimentAggregate.


        :param eid: The eid of this ExperimentAggregate.  # noqa: E501
        :type: str
        """

        self._eid = eid

    @property
    def sha1(self):
        """Gets the sha1 of this ExperimentAggregate.  # noqa: E501


        :return: The sha1 of this ExperimentAggregate.  # noqa: E501
        :rtype: str
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this ExperimentAggregate.


        :param sha1: The sha1 of this ExperimentAggregate.  # noqa: E501
        :type: str
        """

        self._sha1 = sha1

    @property
    def config(self):
        """Gets the config of this ExperimentAggregate.  # noqa: E501


        :return: The config of this ExperimentAggregate.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ExperimentAggregate.


        :param config: The config of this ExperimentAggregate.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def dataset(self):
        """Gets the dataset of this ExperimentAggregate.  # noqa: E501


        :return: The dataset of this ExperimentAggregate.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this ExperimentAggregate.


        :param dataset: The dataset of this ExperimentAggregate.  # noqa: E501
        :type: str
        """

        self._dataset = dataset

    @property
    def username(self):
        """Gets the username of this ExperimentAggregate.  # noqa: E501


        :return: The username of this ExperimentAggregate.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ExperimentAggregate.


        :param username: The username of this ExperimentAggregate.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def hostname(self):
        """Gets the hostname of this ExperimentAggregate.  # noqa: E501


        :return: The hostname of this ExperimentAggregate.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ExperimentAggregate.


        :param hostname: The hostname of this ExperimentAggregate.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def exp_date(self):
        """Gets the exp_date of this ExperimentAggregate.  # noqa: E501


        :return: The exp_date of this ExperimentAggregate.  # noqa: E501
        :rtype: date
        """
        return self._exp_date

    @exp_date.setter
    def exp_date(self, exp_date):
        """Sets the exp_date of this ExperimentAggregate.


        :param exp_date: The exp_date of this ExperimentAggregate.  # noqa: E501
        :type: date
        """

        self._exp_date = exp_date

    @property
    def label(self):
        """Gets the label of this ExperimentAggregate.  # noqa: E501


        :return: The label of this ExperimentAggregate.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ExperimentAggregate.


        :param label: The label of this ExperimentAggregate.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def version(self):
        """Gets the version of this ExperimentAggregate.  # noqa: E501


        :return: The version of this ExperimentAggregate.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ExperimentAggregate.


        :param version: The version of this ExperimentAggregate.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def train_results(self):
        """Gets the train_results of this ExperimentAggregate.  # noqa: E501


        :return: The train_results of this ExperimentAggregate.  # noqa: E501
        :rtype: list[AggregateResult]
        """
        return self._train_results

    @train_results.setter
    def train_results(self, train_results):
        """Sets the train_results of this ExperimentAggregate.


        :param train_results: The train_results of this ExperimentAggregate.  # noqa: E501
        :type: list[AggregateResult]
        """

        self._train_results = train_results

    @property
    def dev_results(self):
        """Gets the dev_results of this ExperimentAggregate.  # noqa: E501


        :return: The dev_results of this ExperimentAggregate.  # noqa: E501
        :rtype: list[AggregateResult]
        """
        return self._dev_results

    @dev_results.setter
    def dev_results(self, dev_results):
        """Sets the dev_results of this ExperimentAggregate.


        :param dev_results: The dev_results of this ExperimentAggregate.  # noqa: E501
        :type: list[AggregateResult]
        """

        self._dev_results = dev_results

    @property
    def test_results(self):
        """Gets the test_results of this ExperimentAggregate.  # noqa: E501


        :return: The test_results of this ExperimentAggregate.  # noqa: E501
        :rtype: list[AggregateResult]
        """
        return self._test_results

    @test_results.setter
    def test_results(self, test_results):
        """Sets the test_results of this ExperimentAggregate.


        :param test_results: The test_results of this ExperimentAggregate.  # noqa: E501
        :type: list[AggregateResult]
        """

        self._test_results = test_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExperimentAggregate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperimentAggregate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
